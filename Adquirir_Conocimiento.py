#En esta pr√°ctica, vamos a crear un chatbot sencillo que pueda adquirir conocimiento de las interacciones con el usuario.
#El chatbot responder√° a preguntas basadas en una base de conocimiento inicial y, si no sabe la respuesta, le pedir√° al usuario que le ense√±e.
#El conocimiento adquirido se guardar√° en un archivo para futuras interacciones.
#Este es un ejemplo b√°sico y puede ser expandido con t√©cnicas m√°s avanzadas de procesamiento de lenguaje natural y aprendizaje autom√°tico.
#Nos ayuda a entender c√≥mo los sistemas pueden aprender de la experiencia y mejorar sus respuestas con el tiempo.

#Librer√≠as necesarias
import json #para manejar archivos JSON y estructuras de datos
#JSON es un formato ligero de intercambio de datos que es f√°cil de leer y escribir para los humanos, y f√°cil de parsear y generar para las m√°quinas.
import os #para manejar operaciones del sistema como verificar la existencia de archivos
#OS proporciona una manera port√°til de usar funcionalidades dependientes del sistema operativo, como leer o escribir archivos.

#Archivo donde se guarda el conocimiento
BASE_CONOCIMIENTO = "conocimiento.json" #archivo JSON para almacenar el conocimiento del chatbot

#cargar base de conocimiento si existe, sino crear una nueva
if os.path.exists(BASE_CONOCIMIENTO): #si el archivo de base de conocimiento existe
    with open(BASE_CONOCIMIENTO, "r", encoding="utf-8") as f: #abrir el archivo en modo lectura con codificaci√≥n UTF-8
        #UTF-8 es una codificaci√≥n de caracteres que puede representar todos los caracteres en el est√°ndar Unicode, lo que la hace ideal para manejar texto en m√∫ltiples idiomas.
        conocimiento = json.load(f) #cargar el contenido del archivo JSON en un diccionario de Python
else: #si el archivo no existe, inicializar con conocimiento b√°sico
    conocimiento = {
        "hola": "¬°Hola! ¬øC√≥mo est√°s?", #respuesta predeterminada para "hola"
        "c√≥mo est√°s": "Muy bien, gracias. ¬øY t√∫?", #respuesta predeterminada para "c√≥mo est√°s"
        "qu√© haces": "Estoy aqu√≠ para platicar contigo." #respuesta predeterminada para "qu√© haces"
    }

print("ü§ñChatbot: Hola, soy tu asistente virtual. Escribe 'salir' para terminar.\n") 

#Bucle principal del chat
while True: #bucle infinito para mantener la conversaci√≥n hasta que el usuario decida salir
    pregunta = input("T√∫: ").strip().lower() #leer la entrada del usuario, eliminar espacios en blanco y convertir a min√∫sculas

    if pregunta == "salir": #si el usuario escribe "salir", terminar la conversaci√≥n
        print("ü§ñ Chatbot: ¬°Hasta pronto!")
        break

    #buscar coincidencia exacta en la base de conocimiento
    if pregunta in conocimiento: #si la pregunta del usuario est√° en el diccionario de conocimiento
        print("ü§ñ Chatbot:", conocimiento[pregunta]) #el chatbot da la respuesta de la base del conocimiento
    else: #si no se encuentra la pregunta en el conocimiento
        print("ü§ñ Chatbot: No s√© qu√© responder a eso.") #el chatbot responde que no tiene esa informacion
        nueva_respuesta = input("¬øQu√© deber√≠a responder cuando digas eso?: ") #pedir al usuario que proporcione una respuesta para esa pregunta

        #Guardar nuevo conocimiento
        conocimiento[pregunta] = nueva_respuesta #agregar la nueva pregunta y respuesta al diccionario de conocimiento
        with open(BASE_CONOCIMIENTO, "w", encoding="utf-8") as f: #abrir el archivo de base de conocimiento en modo escritura con codificaci√≥n UTF-8
            json.dump(conocimiento, f, ensure_ascii=False, indent=4) #guardar el diccionario actualizado en el archivo JSON

        print("ü§ñ Chatbot: ¬°Gracias! Aprend√≠ algo nuevo.") 